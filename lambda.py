# -*- coding: utf-8 -*-
"""lambda.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U5MvnbXhMLYn038d-2OJ1zdk2hQ0YygK
"""

# serializeImageData_lambda.py

import json
import boto3
import base64

s3 = boto3.client('s3')

def lambda_handler(event, context):
    """A function to serialize target data from S3"""

    # Get the s3 address from the Step Function event input
    key = event["s3_key"]
    bucket = event["s3_bucket"]

    # Download the data from s3 to /tmp/image.png

    s3.download_file(bucket,key,"/tmp/image.png")

    # We read the data from a file
    with open("/tmp/image.png", "rb") as f:
        image_data = base64.b64encode(f.read()).decode("utf-8")

    # Pass the data back to the Step Function
    print("Event:", event.keys())
    return {
        'statusCode': 200,
        'body': {
            "image_data": image_data,
            "s3_bucket": bucket,
            "s3_key": key,
            "inferences": []
        }
    }


# image_classification_lambda.py


import json
import base64
import boto3


ENDPOINT = "image-classification-2025-06-22-07-38-12-804"


runtime = boto3.client('sagemaker-runtime')

def lambda_handler(event, context):
    try:
        image_data = base64.b64decode(event['body']['image_data'])

        response = runtime.invoke_endpoint(
            EndpointName=ENDPOINT,
            ContentType='image/png',
            Body=image_data
        )

        result = json.loads(response['Body'].read().decode('utf-8'))

        event['inferences'] = result

        return {
            'statusCode': 200,
            'body': json.dumps(event)
        }

    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }


# filter_low_confidence_lambda.py

import json

THRESHOLD = 0.93

def lambda_handler(event, context):
    inferences = event.get('inferences', [])
    inferences = [float(i) for i in inferences]
    meets_threshold = any(i >= THRESHOLD for i in inferences)

    if not meets_threshold:
        raise Exception("THRESHOLD_CONFIDENCE_NOT_MET")

    return {
        'statusCode': 200,
        'body': event
    }